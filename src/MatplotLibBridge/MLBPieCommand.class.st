"
I am a wrapper for the matplotlib.pyplot.pie function.

From the doc, I can be configured with:
- x : array-like

The input array used to make the pie chart.

- explode : array-like, optional, default: None

If not None, is a len(x) array which specifies the fraction of the radius with which to offset each wedge.

- labels : list, optional, default: None

A sequence of strings providing the labels for each wedge

- colors : array-like, optional, default: None

A sequence of matplotlib color args through which the pie chart will cycle. If None, will use the colors in the currently active cycle.

- autopct : None (default), string, or function, optional

If not None, is a string or function used to label the wedges with their numeric value. The label will be placed inside the wedge. If it is a format string, the label will be fmt%pct. If it is a function, it will be called.

- pctdistance : float, optional, default: 0.6

The ratio between the center of each pie slice and the start of the text generated by autopct. Ignored if autopct is None.

- shadow : bool, optional, default: False

Draw a shadow beneath the pie.

- labeldistance : float, optional, default: 1.1

The radial distance at which the pie labels are drawn

- startangle : float, optional, default: None

If not None, rotates the start of the pie chart by angle degrees counterclockwise from the x-axis.

- radius : float, optional, default: None

The radius of the pie, if radius is None it will be set to 1.

- counterclock : bool, optional, default: True

Specify fractions direction, clockwise or counterclockwise.

- wedgeprops : dict, optional, default: None

Dict of arguments passed to the wedge objects making the pie. For example, you can pass in``wedgeprops = {‘linewidth’: 3}`` to set the width of the wedge border lines equal to 3. For more details, look at the doc/arguments of the wedge object. By default clip_on=False.

- textprops : dict, optional, default: None

Dict of arguments to pass to the text objects.

- center : list of float, optional, default: (0, 0)

Center position of the chart. Takes value (0, 0) or is a sequence of 2 scalars.

- frame : bool, optional, default: False

Plot axes frame with the chart if true.
"
Class {
	#name : #MLBPieCommand,
	#superclass : #MLBPyplotCommand,
	#instVars : [
		'x',
		'explode',
		'labels',
		'colors',
		'autopct',
		'pctdistance',
		'shadow',
		'labeldistance',
		'startangle',
		'radius',
		'counterclock',
		'wedgeprops',
		'textprops',
		'center',
		'frame'
	],
	#category : 'MatplotLibBridge-Commands'
}

{ #category : #accessing }
MLBPieCommand >> autopct [
	<mlbAttribute>
	^ autopct
]

{ #category : #accessing }
MLBPieCommand >> autopct: anObject [
	autopct := anObject
]

{ #category : #accessing }
MLBPieCommand >> center [
	<mlbAttribute>
	^ center
]

{ #category : #accessing }
MLBPieCommand >> center: anObject [
	center := anObject
]

{ #category : #accessing }
MLBPieCommand >> colors [
	<mlbAttribute>
	^ colors
]

{ #category : #accessing }
MLBPieCommand >> colors: anObject [
	colors := anObject
]

{ #category : #accessing }
MLBPieCommand >> counterclock [
	<mlbAttribute>
	^ counterclock
]

{ #category : #accessing }
MLBPieCommand >> counterclock: anObject [
	counterclock := anObject
]

{ #category : #accessing }
MLBPieCommand >> explode [
	<mlbAttribute>
	^ explode
]

{ #category : #accessing }
MLBPieCommand >> explode: anObject [
	explode := anObject
]

{ #category : #accessing }
MLBPieCommand >> frame [
	<mlbAttribute>
	^ frame
]

{ #category : #accessing }
MLBPieCommand >> frame: anObject [
	frame := anObject
]

{ #category : #accessing }
MLBPieCommand >> functionName [
	^ 'pie'
]

{ #category : #accessing }
MLBPieCommand >> labeldistance [
	<mlbAttribute>
	^ labeldistance
]

{ #category : #accessing }
MLBPieCommand >> labeldistance: anObject [
	labeldistance := anObject
]

{ #category : #accessing }
MLBPieCommand >> labels [
	<mlbAttribute>
	^ labels
]

{ #category : #accessing }
MLBPieCommand >> labels: anObject [
	labels := anObject
]

{ #category : #accessing }
MLBPieCommand >> pctdistance [
	<mlbAttribute>
	^ pctdistance
]

{ #category : #accessing }
MLBPieCommand >> pctdistance: anObject [
	pctdistance := anObject
]

{ #category : #accessing }
MLBPieCommand >> radius [
	<mlbAttribute>
	^ radius
]

{ #category : #accessing }
MLBPieCommand >> radius: anObject [
	radius := anObject
]

{ #category : #accessing }
MLBPieCommand >> shadow [
	<mlbAttribute>
	^ shadow
]

{ #category : #accessing }
MLBPieCommand >> shadow: anObject [
	shadow := anObject
]

{ #category : #accessing }
MLBPieCommand >> startangle [
	<mlbAttribute>
	^ startangle
]

{ #category : #accessing }
MLBPieCommand >> startangle: anObject [
	startangle := anObject
]

{ #category : #accessing }
MLBPieCommand >> textprops [
	<mlbAttribute>
	^ textprops
]

{ #category : #accessing }
MLBPieCommand >> textprops: anObject [
	textprops := anObject
]

{ #category : #accessing }
MLBPieCommand >> wedgeprops [
	<mlbAttribute>
	^ wedgeprops
]

{ #category : #accessing }
MLBPieCommand >> wedgeprops: anObject [
	wedgeprops := anObject
]

{ #category : #accessing }
MLBPieCommand >> x [
	<mlbAttribute: 1>
	^ x
]

{ #category : #accessing }
MLBPieCommand >> x: anObject [
	x := anObject
]
